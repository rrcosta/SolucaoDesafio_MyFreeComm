exit
ar
finish
exit
finish
next
file.class == Symbol
file.class
unless file.nil? && file.class == Symbol
next
exit
file.class
file
exit
next
file.class == Symbol
file.class
file.class == "Symbol"
next
file.class
file
exit
file
file.class
exit
:csv_file
csv_file
file
file.class
file
exit
file.nil?
next
file.class == ActionDispatch::Http::UploadedFile
exit
file.class
file
file.content_type
file.content_type.subtype
exit
__method__
method(file).parameters
file.parameters
file
teste = CSV.read("spec/app/fixtures/example_input.csv").read
file.class
file
exit
File.extname(file)
file.content_type
file.class
file
exit
file
exit
file.content_type
file
exit
file.nil?
File.extname(file)
file.class
file
exit
File.extname(file).to_s
File.extname(file)
file.extname
file
exit
next
exit
next
example
next
file.nil?
file.nil
next
file.class
file.content
file
exit
run_after_example
next
e
next
ar
next
file.nil?
next
file.nil?
file.content_type.nil?
file.content_type
file.class
file
exit
file.class
file
exit
file
exit
file.content_type.nil?
file.content_type.exist?
file.content_type.exists?
